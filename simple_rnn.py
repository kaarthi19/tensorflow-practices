# -*- coding: utf-8 -*-
"""Simple RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZDrG1h2tF2SqbPOpu5yyjl0jvQRdUmzo
"""

!pip install -q tensorflow==2.1.0
import tensorflow as tf
print(tf.__version__)

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from tensorflow.keras.layers import Input, Flatten, Dense, SimpleRNN
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import SGD, Adam

#making the data

series = np.sin(0.1*np.arange(200)) +np.random.randn(200)*0.1

#plot it
plt.plot(series)
plt.show()

#build the dataset

T = 10
D = 1
X = []
Y = []

for t in range(len(series) - T):
  x = series[t:t+T]
  X.append(x)
  y = series[t+T]
  Y.append(y)

X = np.array(X).reshape(-1, T, 1)
Y = np.array(Y)
N=len(X)
print("X.shape:", X.shape, "Y.shape:", Y.shape)

#autoregressive RNN model

i = Input(shape=(T, 1))
x = SimpleRNN(5, activation='relu')(i) #a neural network with activation function reduces it to a linear model #play with the activation functions
x = Dense(1)(x)

model = Model(i, x)
model.compile(loss='mse', optimizer=Adam(lr=0.1))

#train RNN

r = model.fit(X[:-N//2], Y[:-N//2], epochs=80, validation_data=(X[-N//2:], Y[-N//2:]))

#plot loss per iteration
plt.plot(r.history['loss'], label='loss')
plt.plot(r.history['val_loss'], label='val_loss')
plt.legend()

# "Wrong" forecast using true targets

validation_target = Y[-N//2:]
validation_predictions = []

# index of first validation input
i = -N//2

while len(validation_predictions) < len(validation_target):
  p = model.predict(X[i].reshape(1, -1, 1))[0,0] # 1x1 array -> scalar
  i += 1
  
  # update the predictions list
  validation_predictions.append(p)

plt.plot(validation_target, label='forecast target')
plt.plot(validation_predictions, label='forecast prediction')
plt.legend()

#forecast using rnn

validation_target = Y[-N//2:]
validation_predictions = []

last_x = X[-N//2]

while len(validation_predictions) < len(validation_target):
  p = model.predict(last_x.reshape(1, -1, 1))[0,0]
  
  #update the predictions list
  validation_predictions.append(p)
  
  #make the new input
  last_x = np.roll(last_x, -1)
  last_x[-1] = p

plt.plot(validation_target, label='forecast target')
plt.plot(validation_predictions, label='forecast prediction')
plt.legend()