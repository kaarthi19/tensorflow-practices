# -*- coding: utf-8 -*-
"""RNN Autoregressive Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aHzwcVyUJzBNuWFD0qLk0QUsLBXdW8H2
"""

!pip install -q tensorflow==2.1.0
import tensorflow as tf
print(tf.__version__)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from tensorflow.keras.layers import Input, Dense
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import SGD, Adam

#make synthethic data
series = np.sin(0.1*np.arange(200)) #+ np.random.randn(200)*0.1

#plot the data
plt.plot(series)
plt.show()

#build the dataset
T = 10
X = []
Y = []
for t in range(len(series) - T):
  x = series[t:t+T]
  X.append(x)
  y = series[t+T]
  Y.append(y)

X = np.array(X).reshape(-1, T)
Y = np.array(Y)
N = len(x)
print("X.Shape", X.shape, "Y.shape", Y.shape)

#trying autoregressive linear model

i = Input(shape=(T,))
x = Dense(1)(i)
model = Model(i, x)
model.compile(
    loss='mse',
    optimizer=Adam(lr=0.1)
)

#train the RNN

r = model.fit(
  X[:-N//2], Y[:-N//2],
  epochs=80,
  validation_data=(X[-N//2:], Y[-N//2:]),
)

#plot loss per iteration
plt.plot(r.history['loss'], label='loss')
plt.plot(r.history['val_loss'], label='val_loss')
plt.legend()

#forecast future values

validation_target = Y[-N//2:]
validation_predictions = []

#last train input
last_x = X[-N//2]

while len(validation_predictions) < len(validation_target):
  p = model.predict(last_x.reshape(1, -1))[0,0]

  validation_predictions.append(p) #update the predictions list

  #make new input
  last_x = np.roll(last_x, -1)
  last_x[-1] = p

plt.plot(validation_target, label='forecast target')
plt.plot(validation_predictions, label='forecast prediction')
plt.legend()